//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SvgReport.SvgTemplates {
    using System;
    
    
    public partial class Chart : ChartBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;

    Func<int, int, double> ComputeRad = (numer, denom) =>
    {
        return (2 * Math.PI / denom) * numer - (Math.PI / 2);
    };
    Func<double, double, double> ComputeX = (percentage, rad) => 
    {
        return 500 + Math.Cos(rad) * (percentage / 100) * 400;
    };
    Func<double, double, double> ComputeY = (percentage, rad) => 
    {
        return 500 + Math.Sin(rad) * (percentage / 100) * 400;
    };
    Func<int, int, int> ComputeCirculateIndex = (i, length) => 
    {
        return i < 0 ? length + i : i;
    };

            this.Write(@"<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.1//EN"" ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"">
<svg xmlns=""http://www.w3.org/2000/svg""
    xmlns:xlink=""http://www.w3.org/1999/xlink"" version=""1.1"" width=""1000"" height=""1000"" style=""background-color: rgb(255, 255, 255);"">
    <defs/>
    <g>
        <path d=""");
            this.Write(this.ToStringHelper.ToStringWithCulture( Frame.Path ));
            this.Write("\" fill=\"none\" stroke=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( Frame.Color ));
            this.Write("\" stroke-width=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( Frame.Width ));
            this.Write("\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/>\r\n");
 for (var i = 0; i < points.Length; i++) { 
            this.Write("        <path d=\"M 500 500 L ");
            this.Write(this.ToStringHelper.ToStringWithCulture( ComputeX(105, ComputeRad(i, points.Length)) ));
            this.Write("\r\n         ");
            this.Write(this.ToStringHelper.ToStringWithCulture( ComputeY(105, ComputeRad(i, points.Length)) ));
            this.Write("\" fill=\"none\" stroke=\"#DDD\" stroke-width=\"1\" stroke-miterlimit=\"10\" pointer-event" +
                    "s=\"stroke\"/>\r\n");
 } 
 for (var i = 0; i < points.Length; i++) { 
            this.Write("        <path d=\"M ");
            this.Write(this.ToStringHelper.ToStringWithCulture( ComputeX(points[i].Percentage, ComputeRad(i, points.Length)) ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( ComputeY(points[i].Percentage, ComputeRad(i, points.Length)) ));
            this.Write(" L ");
            this.Write(this.ToStringHelper.ToStringWithCulture( ComputeX(points[ComputeCirculateIndex(i - 1, points.Length)].Percentage, ComputeRad(ComputeCirculateIndex(i - 1, points.Length), points.Length)) ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( ComputeY(points[ComputeCirculateIndex(i - 1, points.Length)].Percentage, ComputeRad(ComputeCirculateIndex(i - 1, points.Length), points.Length)) ));
            this.Write("\" stroke=\"#001dbc\" />\r\n");
 } 
 for (var i = 0; i < points.Length; i++) { 
            this.Write("        <circle cx=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( ComputeX(points[i].Percentage, ComputeRad(i, points.Length)) ));
            this.Write("\" cy=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( ComputeY(points[i].Percentage, ComputeRad(i, points.Length)) ));
            this.Write("\" fill=\"#001dbc\" r=\"3\"/>\r\n");
 } 
 for (var i = 0; i < points.Length; i++) { 
            this.Write("        <text x=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( ComputeX(105, ComputeRad(i, points.Length)) ));
            this.Write("\" y=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( ComputeY(105, ComputeRad(i, points.Length)) ));
            this.Write("\" font-size=\"15\" text-anchor=\"middle\" dominant-baseline=\"central\" >");
            this.Write(this.ToStringHelper.ToStringWithCulture( points[i].Title ));
            this.Write("</text>\r\n");
 } 
            this.Write("    </g>\r\n</svg>");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class ChartBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
